###################################
# spray-socketio Reference Config File #
###################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

akka {
  actor {
    serializers {
      frame = "campfire.socketio.serializer.FrameSerializer"
      command = "campfire.socketio.serializer.CommandSerializer"
      packet = "campfire.socketio.serializer.PacketSerializer"
      connctx = "campfire.socketio.serializer.ConnectionContextSerializer"
      onpacket = "campfire.socketio.serializer.OnPacketSerializer"
      onbroadcast = "campfire.socketio.serializer.OnBroadcastSerializer"
      status = "campfire.socketio.serializer.StatusSerializer"
    }
    serialization-bindings {
      "spray.can.websocket.frame.Frame" = frame
      "campfire.socketio.UserActive$Command" = command
      "campfire.socketio.packet.Packet" = packet
      "campfire.socketio.ConnectionContext" = connctx
      "campfire.socketio.ConnectionActive$OnPacket" = onpacket
      "campfire.socketio.ConnectionActive$OnBroadcast" = onbroadcast
      "campfire.socketio.ConnectionActive$Status" = status
    }
  }
}

spray.websocket {
  # Supported Per-message Compression Extensions. To disable, set to []
  # pmce = ["permessage-deflate"]
  pmce = []
}

spray.socketio {

  # "local" or "cluster"
  mode = "local"

  scheduler {
    tick-duration = 10 ms
    ticks-per-wheel = 512
  }

  server {
    supported-transports = "websocket,xhr-polling"

    # seconds of server heartbeat send interval
    # socketio.js will disclose connection strictly according to both heartbeatTimeout and closeTimeout,
    # we have to give heartbeatInterval some loose for example 30s for network delivering time.
    heartbeat-interval = 30

    # seconds. Send to client as protocol part, client will use it to decide if server is unavailable.
    heartbeat-timeout = 60

    # seconds.
    # Used by server to decide if client is also available, start countdown when a heartbeat sent
    # Send to client as protocol part, client will use it to decide if server is unavailable.
    close-timeout = 60

    # seconds
    actor-selection-resolve-timeout = 10

    # seconds
    namespace-subscribe-timeout = 30

    namespace-group-name = "ns-group"

    enable-connectionactive-persistence = false
  }

  seed-nodes = []

  routing-logic = "consistent-hashing"

  # Fully qualified config path which holds the dispatcher configuration
  # to be used for the Namespaces actor.
  namespaces-dispatcher = "akka.actor.default-dispatcher"

  # Fully qualified config path which holds the dispatcher configuration
  # to be used for the Namespace actors.
  namespace-dispatcher = "akka.actor.default-dispatcher"
}


spray.socketio.benchmark {

  server {
    host = "0.0.0.0"
    port = 8080
  }

  client {
    //addresses = ["101.251.195.186:28080"]
    addresses = ["localhost:8080"]

    concurrencyLevels = [10, 100, 500, 1000, 2000, 5000, 10000, 30000]

    post-test-reception-timeout = 5

    create-bunch-clients-timeout = 30

    initail-messages-sent-per-second = 1

    max-messages-sent-per-second = 200000

    messages-sent-per-second-ramp = 100

    seconds-to-test-each-load-state = 1

    seconds-between-rounds = 2
  }

  broadcast = false
}
